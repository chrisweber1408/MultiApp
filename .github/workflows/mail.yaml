name: üöÄ CI/CD Pipeline

on:
  push:
    branches:
      - '**'

jobs:
  # üõ†Ô∏è Build Job ‚Äì L√§uft immer
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üîì Make Gradle Executable
        working-directory: MultiAppBackend
        run: chmod +x ./gradlew

      - name: ‚úÖ Run Backend Tests
        working-directory: MultiAppBackend
        run: ./gradlew test

      - name: üõ†Ô∏è Build Backend (without tests)
        working-directory: MultiAppBackend
        run: ./gradlew build -x test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: üì¶ Upload JAR as Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: MultiAppBackend/build/libs/MultiAppBackend-0.0.1-SNAPSHOT.jar

      - name: üì¶ Install Frontend Dependencies
        if: github.ref == 'refs/heads/main'
        working-directory: MultiAppFrontend
        run: npm install

      - name: üß± Build Angular Frontend
        if: github.ref == 'refs/heads/main'
        working-directory: MultiAppFrontend
        run: npm run build --omit=dev

  # üê≥ Docker Job ‚Äì Nur auf main
  docker:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîê Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üì¶ Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: MultiAppBackend/build/libs/

      - name: üê≥ Build & Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-backend:latest -f MultiAppBackend/deployment/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-backend:latest

      - name: üê≥ Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-frontend:latest -f MultiAppFrontend/deployment/Dockerfile MultiAppFrontend
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-frontend:latest

      - name: üê≥ Build & Push PostgreSQL Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-postgres:latest \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -f Postgres/Dockerfile Postgres
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-postgres:latest

  # üöÄ Deploy Job ‚Äì Nur auf main
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîß Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: üõ°Ô∏è Configure kubeconfig
        run: |
          mkdir -p ${HOME}/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ${HOME}/.kube/config
          kubectl cluster-info

      - name: üîç Test Kubernetes Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: üõ°Ô∏è Create DockerHub Pull Secret
        run: |
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }} \
            --docker-email=${{ secrets.DOCKER_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üßæ Replace Image Placeholders in YAMLs
        run: |
          sed -i "s|DOCKER_USERNAME_PLACEHOLDER|${{ secrets.DOCKER_USERNAME }}|g" Postgres/multi-postgres-deployment.yaml
          sed -i "s|DOCKER_USERNAME_PLACEHOLDER|${{ secrets.DOCKER_USERNAME }}|g" MultiAppBackend/deployment/multi-backend-deployment.yaml
          sed -i "s|DOCKER_USERNAME_PLACEHOLDER|${{ secrets.DOCKER_USERNAME }}|g" MultiAppFrontend/deployment/multi-frontend-deployment.yaml

      - name: üß± Create Namespace
        run: kubectl apply -f manifests/namespace.yaml

      - name: üõ°Ô∏è Create Secrets (Postgres + JWT)
        run: |
          kubectl create secret generic postgres-secret --dry-run=client -o yaml \
            --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --from-literal=POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            | kubectl apply -f - -n multi-app
          
          kubectl create secret generic jwt-secret --dry-run=client -o yaml \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            | kubectl apply -f - -n multi-app

      - name: üöÄ Deploy All Services to Kubernetes
        run: |
          set -e

          # PostgreSQL
          kubectl apply -f Postgres/multi-postgres-deployment.yaml
          kubectl rollout status deployment/postgres -n multi-app --timeout=60s

          # Backend
          kubectl apply -f MultiAppBackend/deployment/multi-backend-deployment.yaml
          kubectl rollout status deployment/multi-app-backend -n multi-app --timeout=60s

          # Frontend
          kubectl apply -f MultiAppFrontend/deployment/multi-frontend-deployment.yaml
          kubectl rollout status deployment/multi-frontend -n multi-app --timeout=60s

      - name: üîÑ Restart All Deployments
        run: |
          for deployment in postgres multi-app-backend multi-frontend; do
            kubectl rollout restart deployment/$deployment -n multi-app
            kubectl rollout status deployment/$deployment -n multi-app --timeout=60s
          done

      - name: üåê Apply Ingress Controller
        run: kubectl apply -f manifests/ingress.yaml

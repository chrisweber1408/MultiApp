name: CI/CD Pipeline

on:
  push:
    branches:
      - S-008

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission to gradlew
        working-directory: MultiAppBackend
        run: chmod +x ./gradlew

      - name: Build Spring Boot app with Gradle
        working-directory: MultiAppBackend
        run: ./gradlew build -x test

      - name: Install Dependencies
        working-directory: MultiAppFrontend
        run: npm install

      - name: Build Angular app
        working-directory: MultiAppFrontend
        run: npm run build --omit=dev

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Spring Boot Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-backend:latest -f MultiAppBackend/Dockerfile MultiAppBackend
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-backend:latest

      - name: Build & Push Angular Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-frontend:latest -f MultiAppFrontend/Dockerfile MultiAppFrontend
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-frontend:latest

      - name: Build & Push PostgreSQL Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/multi-app-postgres:latest \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -f Postgres/Dockerfile Postgres
          docker push ${{ secrets.DOCKER_USERNAME }}/multi-app-postgres:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend-deployment.yml
          kubectl apply -f k8s/frontend-deployment.yml
          kubectl apply -f k8s/postgres-deployment.yml
          kubectl rollout restart deployment/backend
          kubectl rollout restart deployment/frontend
          kubectl rollout restart deployment/postgres
